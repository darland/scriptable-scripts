{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "brown",
    "glyph" : "magic"
  },
  "name" : "OZON BARCODE",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: deep-gray; icon-glyph: magic;\n\n\/\/ This script was created by Artem Tiumentcev\n\nconst debug = false;\nconst baseURL = 'https:\/\/api.ozon.ru\/';\n\nlet deviceID = Keychain.contains('ozonWidget_deviceID') ? Keychain.get('ozonWidget_deviceID') : generateDeviceID();\n\nlet defaultHeaders = {\n    'Content-Type': 'application\/json; charset=utf-8',\n    'Accept': 'application\/json; charset=UTF-8',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Connection': 'Keep-Alive',\n    'Cache-Control': 'no-cache',\n    'User-Agent': 'OzonStore\/825',\n    'x-o3-sdk-versions': 'ozonid_ios\/6.0.1',\n    'x-o3-language': 'ru',\n    'x-o3-app-name': 'ozonapp_ios',\n    'x-o3-app-version': '17.17.0(825)',\n};\n\nlet deviceInfo = {\n    \"vendor\": \"Apple\",\n    \"supportCountrySelect\": true,\n    \"deviceId\": deviceID,\n    \"os\": \"iOS\",\n    \"hasBiometrics\": true,\n    \"biometryType\": \"faceId\",\n    \"model\": \"iPhone15,4\",\n    \"version\": Device.systemVersion(),\n}\n\nfunction generateDeviceID() {\n    let id = '';\n    let parts = [8, 4, 4, 4, 12];\n\n    for (let i = 0; i < parts.length; i++) {\n        let part = '';\n        for (let j = 0; j < parts[i]; j++) {\n            part += Math.floor(Math.random() * 16).toString(16);\n        }\n        id += part;\n        if (i < parts.length - 1) {\n            id += '-';\n        }\n    }\n\n    return id.toLocaleUpperCase();\n}\n\nasync function request(path, method, headers, data) {\n    if (debug) {\n        console.log('Request: ' + JSON.stringify({\n            path: path,\n            method: method,\n            headers: headers,\n            data: data\n        }));\n    }\n\n    const req = new Request(baseURL + path);\n\n    req.method = method || 'GET';\n    req.headers = {...defaultHeaders, ...headers};\n\n    if (data) {\n        req.body = JSON.stringify(data)\n    }\n\n    const json = await req.loadJSON()\n    if (json.error) {\n        if (debug) {\n            console.error(json.error);\n        }\n\n        return Promise.reject(json.error)\n    }\n\n    if (debug) {\n        console.log('Response: ' + JSON.stringify(json));\n    }\n\n    return json\n}\n\nasync function initPromptOTP(title) {\n    const promptOTP = new Alert();\n\n    promptOTP.title = 'Ozon';\n    promptOTP.message = title || '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';\n    promptOTP.addTextField('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', '', '');\n    promptOTP.addAction('–û—Ç–ø—Ä–∞–≤–∏—Ç—å');\n    promptOTP.addCancelAction('–û—Ç–º–µ–Ω–∞');\n\n    let answerOTP = await promptOTP.presentAlert();\n\n    return [promptOTP.textFieldValue(0), answerOTP];\n}\n\nasync function setupAssistant() {\n    let promptInfo = new Alert()\n    promptInfo.message = '–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Ozon. –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ?'\n    promptInfo.addAction('–î–∞')\n    promptInfo.addCancelAction('–ù–µ—Ç')\n\n    if (await promptInfo.presentAlert() === -1) {\n        throw new Error('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');\n    }\n\n    const promptLoginType = new Alert();\n\n    promptLoginType.title = '–í—Ö–æ–¥ –≤ Ozon';\n    promptLoginType.message = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Ö–æ–¥–∞:';\n    promptLoginType.addAction('E-mail');\n    promptLoginType.addAction('–¢–µ–ª–µ—Ñ–æ–Ω');\n\n    let loginType = await promptLoginType.presentAlert();\n\n    \/\/ default login path for phone\n    let loginPath = 'composer-api.bx\/_action\/ozonIdPageEntry?widgetName=csma.entryCredentialsRequired';\n\n    if (loginType === 0) {\n        console.log('–í—Ö–æ–¥–∏–º –ø–æ E-mail...');\n        loginPath = 'composer-api.bx\/_action\/ozonIdPageEntry?iso=RU&type=emailOtpEntry&widgetName=csma.entryCredentialsRequired';\n    }\n\n    \/\/ make a first request to get the submit button\n    let json = await request(loginPath, 'POST', {}, deviceInfo);\n\n    let submit = json.data.submitButton;\n    if (!submit) {\n        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞. –°–∞–π—Ç –∏–∑–º–µ–Ω–µ–Ω?');\n    }\n\n    const promptLogin = new Alert();\n    promptLogin.title = '–í—Ö–æ–¥ –≤ Ozon';\n\n    if (loginType === 0) {\n        promptLogin.message = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à E-mail';\n        promptLogin.addTextField('E-mail', '', '');\n    } else {\n        promptLogin.message = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω';\n        promptLogin.addTextField('–¢–µ–ª–µ—Ñ–æ–Ω 7xxxxxxxxxx', '', '');\n    }\n\n    promptLogin.addAction('–í–æ–π—Ç–∏');\n    promptLogin.addCancelAction('–û—Ç–º–µ–Ω–∞');\n\n    if (await promptLogin.presentAlert() === -1) {\n        throw new Error('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');\n    }\n\n    let login = promptLogin.textFieldValue(0);\n\n    let reqData = {\n        \"deviceId\": deviceID,\n        \"model\": \"iPhone15,4\",\n        \/\/ \"connectionType\": \"CELLULAR_4G\",\n    }\n\n    if (loginType === 0) {\n        reqData.email = login;\n    } else {\n        reqData.phone = login;\n    }\n\n    json = await request('composer-api.bx\/_action\/' + submit.action, 'POST', {}, reqData);\n\n    while (json.status && json.status.deeplink) {\n        if (debug) {\n            console.log('–ü–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞: ' + json.status.deeplink);\n        }\n\n        json = await request('composer-api.bx\/_action\/' + json.status.deeplink.replace(\/^ozon:\\\/\\\/\/, ''), 'POST');\n\n        let otp = json.data;\n\n        if (!otp.subtitle) {\n            throw new Error(otp.title);\n        }\n\n        let [otpCode, answerOTP] = await initPromptOTP(otp.title);\n\n        if (answerOTP === -1) {\n            throw new Error('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');\n        }\n\n        json = await request('composer-api.bx\/_action\/' + otp.action, 'POST', {}, {\n            ...deviceInfo,\n            ...otp.data,\n            otp: otpCode\n        });\n\n        if (json.status && json.status.deeplink && (\/isLongTimeNoSee=true\/i.test(json.status.deeplink))) {\n            \/\/ long time no see and need to check by email\n            json = await request('composer-api.bx\/_action\/' + json.status.deeplink.replace(\/^ozon:\\\/\\\/\/, ''));\n            json = await request('composer-api.bx\/_action\/' + json.data.submitButton.action);\n            json = await request('composer-api.bx\/_action\/' + json.status.deeplink.replace(\/^ozon:\\\/\\\/\/, ''));\n\n            otp = json.data;\n\n            let [otpCode, answerOTP] = await initPromptOTP();\n            if (answerOTP === -1) {\n                throw new Error('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');\n            }\n\n            json = await request('composer-api.bx\/_action\/' + otp.action, 'POST', {}, {\n                ...deviceInfo,\n                ...otp.data,\n                extraOtp: otpCode\n            });\n        }\n\n        if (json.data && json.data.authToken) {\n            saveAuthToken(json.data.authToken);\n        }\n    }\n\n    console.log('Logged in successfully');\n}\n\nfunction saveAuthToken(authToken) {\n    Keychain.set('ozonWidget_authToken', JSON.stringify(authToken));\n}\n\nasync function refreshAuthToken(authToken) {\n    let json = await request('composer-api.bx\/_action\/initAuthRefresh', 'POST', {}, {\n        \"refreshToken\": authToken.refreshToken\n    });\n\n    if (!json.authToken) {\n        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');\n    }\n\n    saveAuthToken(json.authToken);\n\n    return {\n        'Authorization': json.authToken.tokenType + ' ' + json.authToken.accessToken\n    }\n}\n\nasync function getAuthHeader() {\n    let authToken = JSON.parse(Keychain.get('ozonWidget_authToken'));\n\n    let authHeader = {\n        'Authorization': authToken.tokenType + ' ' + authToken.accessToken\n    }\n\n    \/\/ check token validity\n    try {\n        await request('composer-api.bx\/_action\/getUserV2', 'POST', authHeader, {\"profile\": true});\n    } catch (e) {\n        if (debug) {\n            console.error(e);\n        }\n\n        authHeader = await refreshAuthToken(authToken);\n    }\n\n    return authHeader;\n}\n\nasync function createWidget(authHeader) {\n    let widget = new ListWidget();\n    widget.backgroundColor = new Color(\"#FFFFFF\");\n\n    let jsonData = await request('composer-api.bx\/page\/json\/v2?url=\/my\/orderlist\/barcode\/', 'GET', authHeader);\n    let barcodeStateId = Object.keys(jsonData.widgetStates).find(key => key.startsWith('barcode'));\n\n    if (barcodeStateId) {\n        let barcodeData = JSON.parse(jsonData.widgetStates[barcodeStateId]);\n\n        if (barcodeData && barcodeData.shipments && barcodeData.shipments[0] && barcodeData.shipments[0].code) {\n            let code = barcodeData.shipments[0].code;\n            let reqBarcodeImage = await new Request('https:\/\/api.ozon.ru\/my-account-api-gateway.bx\/codes\/v1\/generate?code=' + code + '&height=198&type=bar&width=670');\n            let barcodeImage = await reqBarcodeImage.loadImage();\n            let barcodeImageElement = widget.addImage(barcodeImage);\n            barcodeImageElement.centerAlignImage();\n        }\n\n        \/\/ hint\n        if (barcodeData && barcodeData.shipments && barcodeData.shipments[0] && barcodeData.shipments[0].hint) {\n            widget.addSpacer(5);\n            let hint = widget.addText(barcodeData.shipments[0].hint);\n            hint.font = Font.boldSystemFont(25);\n            hint.centerAlignText()\n            hint.textColor = new Color(\"#000000\");\n        }\n    } else {\n        \/\/ show emoji if poop\n        let emoji = widget.addText('üì¶‚úàÔ∏èüööüì¨');\n        emoji.font = Font.boldSystemFont(50);\n        emoji.centerAlignText()\n        emoji.textColor = new Color(\"#000000\");\n    }\n\n    \/\/ Return the created widget\n    return widget;\n}\n\nasync function setupWidget() {\n    if (!Keychain.contains('ozonWidget_authToken')) {\n        try {\n            await setupAssistant();\n        } catch (e) {\n            if (debug) {\n                console.error(e);\n            }\n\n            return;\n        }\n    }\n\n    let authHeader = await getAuthHeader();\n    let widget = await createWidget(authHeader);\n\n    \/\/ Check where the script is running\n    if (config.runsInWidget) {\n        \/\/ Runs inside a widget so add it to the homescreen widget\n        \/\/ Refresh the widget after 8 hours\n        widget.refreshAfterDate = new Date(Date.now() + 8 * 60 * 60 * 1000);\n\n        Script.setWidget(widget);\n    } else if (config.runsInApp && args.widgetParameter && Object.keys(args.widgetParameter).length > 0) {\n        \/\/ Open Ozon app and show the expanded barcode\n        Safari.open('ozon:\/\/my\/barcodeExpanded\/');\n    } else {\n        \/\/ Show the medium widget inside the app\n        widget.presentMedium();\n    }\n\n    Script.complete();\n}\n\nawait setupWidget();\n",
  "share_sheet_inputs" : [

  ]
}